import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Reader } from '../types/Reader';

import { Zone } from '../types/Zone';
import { Floor } from '../types/Floor';
import { FireSprinkler } from '../types/FireSprinkler';
import { Camera } from '../types/Camera';
import { Controller } from '../types/Controller';

interface FloorsState {
    floors: Floor[];
}

const initialState: FloorsState = {
    floors: [],
};

const floorsSlice = createSlice({
    name: 'floors',
    initialState,
    reducers: {

        //Floor
        setFloors(state, action: PayloadAction<Floor[]>) {
            state.floors = action.payload;
        },
        addFloor(state, action: PayloadAction<Floor>) {
            const existingFloor = state.floors.find(floor => floor.name === action.payload.name);
            if (!existingFloor) {
                const newFloor = { ...action.payload };
                if(newFloor.id === -1){
                    newFloor.id = (state.floors?.length ?? 0) + 1;
                }
                if(newFloor.name === "newDefaultFloorName"){
                    newFloor.name = `AutoGeneratedName${newFloor.id}`;
                }
            state.floors.push(newFloor);
            }
        },
        updateFloor(state, action: PayloadAction<Floor>) {
            const index = state.floors.findIndex(floor => floor.id === action.payload.id);
            if (index !== -1) {
                state.floors[index] = action.payload;
            }
        },
        removeFloor(state, action: PayloadAction<number>) {
            state.floors = state.floors.filter(floor => floor.id !== action.payload);
        },
        
        //Zones in Floor
        addZoneToFloor(state, action: PayloadAction<{ floorId: number, zone: Zone }>) {
            const { floorId, zone } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if(zone.id === -1){
                zone.id = (floor?.zones?.length ?? 0) + 1;
            }
            if(zone.name === "newDefaultZoneName"){
                zone.name = `AutoGeneratedName${zone.id}`;
            }
            if (floor) {
                if (!floor.zones) {
                    floor.zones = [];
                }
                floor.zones.push(zone);
            }
        },
        
        updateZoneInFloor(state, action: PayloadAction<{ floorId: number, zone: Zone }>) {
            const { floorId, zone } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
            const index = floor.zones.findIndex(z => z.id === zone.id);
            if (index !== -1) {
                floor.zones[index] = zone;
            }
            }
        },
        deleteZoneInFloor(state, action: PayloadAction<{ floorId: number, zoneId: number }>) {
            const { floorId, zoneId } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
            floor.zones = floor.zones.filter(z => z.id !== zoneId);
            }
        },

        //reader in Floor
        addReaderToFloor(state, action: PayloadAction<{ floorId: number, reader: Reader }>) {
            const { floorId, reader } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if(reader.id === -1){
                reader.id = (floor?.readers?.length ?? 0) + 1;
            }
            if(reader.name === "not_defined" || reader.name === "newDefaultReaderName"){
                reader.name = `AutoGeneratedName${reader.id}`;
            }
            if (floor) {
                if (!floor.readers) {
                    floor.readers = [];
                }
                floor.readers.push(reader);
            }
        },
        updateReaderInFloor(state, action: PayloadAction<{ floorId: number, reader: Reader }>) {
            const { floorId, reader } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
            const index = floor.readers.findIndex(r => r.id === reader.id);
            if (index !== -1) {
                floor.readers[index] = reader;
            }
            }
        },
        deleteReaderInFloor(state, action: PayloadAction<{ floorId: number, readerId: number }>) {
            const { floorId, readerId } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
            floor.readers = floor.readers.filter(r => r.id !== readerId);
            }
        },

        //FireSprinkler
        addFireSprinklerToFloor(state, action: PayloadAction<{ floorId: number, fireSprinkler: FireSprinkler }>) {
            const { floorId, fireSprinkler } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                if (!floor.fireSprinklers) {
                    floor.fireSprinklers = [];
                }
                const newFireSprinkler = { ...fireSprinkler };
                if(newFireSprinkler.id === -1){
                    newFireSprinkler.id = (floor?.fireSprinklers?.length ?? 0) + 1;
                }
                floor.fireSprinklers.push(newFireSprinkler);
            }
        },

        updateFireSprinklerInFloor(state, action: PayloadAction<{ floorId: number, fireSprinkler: FireSprinkler }>) {
            const { floorId, fireSprinkler } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                const index = floor.fireSprinklers.findIndex(fs => fs.id === fireSprinkler.id);
                if (index !== -1) {
                    floor.fireSprinklers[index] = fireSprinkler;
                }
            }
        },
        deleteFireSprinklerInFloor(state, action: PayloadAction<{ floorId: number, fireSprinklerId: number }>) {
            const { floorId, fireSprinklerId } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                floor.fireSprinklers = floor.fireSprinklers.filter(fs => fs.id !== fireSprinklerId);
            }
        },

        //Camera
        addCameraToFloor(state, action: PayloadAction<{ floorId: number, camera: Camera }>) {
            const { floorId, camera } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                if (!floor.cameras) {
                    floor.cameras = [];
                }
                const newCamera = { ...camera };
                if(newCamera.id === -1){
                    newCamera.id = (floor?.cameras?.length ?? 0) + 1;
                }
                floor.cameras.push(newCamera);
            }
        },
        updateCameraInFloor(state, action: PayloadAction<{ floorId: number, camera: Camera }>) {
            const { floorId, camera } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                const index = floor.cameras.findIndex(c => c.id === camera.id);
                if (index !== -1) {
                    floor.cameras[index] = camera;
                }
            }
        },

        deleteCameraInFloor(state, action: PayloadAction<{ floorId: number, cameraId: number }>) {
            const { floorId, cameraId } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                floor.cameras = floor.cameras.filter(c => c.id !== cameraId);
            }
        },
        //Controller
        addControllerToFloor(state, action: PayloadAction<{ floorId: number, controller: Controller }>) {
            const { floorId, controller } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                if (!floor.controllers) {
                    floor.controllers = [];
                }
                const newController = { ...controller };
                if(newController.id === -1){
                    newController.id = (floor?.controllers?.length ?? 0) + 1;
                }
                floor.controllers.push(newController);
            }
        },
        updateControllerInFloor(state, action: PayloadAction<{ floorId: number, controller: Controller }>) {
            const { floorId, controller } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                const index = floor.controllers.findIndex(c => c.id === controller.id);
                if (index !== -1) {
                    floor.controllers[index] = controller;
                }
            }
        },
        deleteControllerInFloor(state, action: PayloadAction<{ floorId: number, controllerId: number }>) {
            const { floorId, controllerId } = action.payload;
            const floor = state.floors.find(floor => floor.id === floorId);
            if (floor) {
                floor.controllers = floor.controllers.filter(c => c.id !== controllerId);
            }
        }
    },
});
export const { setFloors, 
    addFloor,updateFloor, removeFloor,  
    addZoneToFloor, updateZoneInFloor, deleteZoneInFloor,
    addReaderToFloor, updateReaderInFloor, deleteReaderInFloor,
    addFireSprinklerToFloor, updateFireSprinklerInFloor, deleteFireSprinklerInFloor,
    addCameraToFloor, updateCameraInFloor, deleteCameraInFloor,
    addControllerToFloor, updateControllerInFloor, deleteControllerInFloor
 } = floorsSlice.actions;
export default floorsSlice.reducer;